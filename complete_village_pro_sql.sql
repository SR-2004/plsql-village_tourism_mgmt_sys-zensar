--       project:- VILLAGE TOURISM MANAGEMENT SYSTEM

create table villages (village_id number generated by default as identity primary key, village_name varchar2(100) not null, region varchar2(50), description varchar2(255));
INSERT INTO villages (village_name, region, description) VALUES ('southern', 'South', 'A small peaceful village.');
INSERT INTO villages (village_name, region, description) VALUES ('Riverside', 'North', 'A village by the river with beautiful views.');
INSERT INTO villages (village_name, region, description) VALUES ('Lakeside', 'West', 'A serene village by a large lake.');
INSERT INTO villages (village_name, region, description) VALUES ('Hilltop', 'East', 'A village on top of a hill with great views.');
INSERT INTO villages (village_name, region, description) VALUES ('Woodland', 'Central', 'A village surrounded by dense forests.');
select *from villages;

create table attractions (attraction_id number generated by default as identity primary key, village_id number not null references villages(village_id), name varchar2(100), description varchar2(255));
INSERT INTO attractions (village_id, name, description) VALUES (1, 'Greenfield Park', 'A large park with plenty of open space and playgrounds.');
INSERT INTO attractions (village_id, name, description) VALUES (2, 'Riverside Viewpoint', 'A scenic spot offering breathtaking views of the river.');
INSERT INTO attractions (village_id, name, description) VALUES (3, 'Lakeside Boating', 'Boating activities on the peaceful lakeside.');
INSERT INTO attractions (village_id, name, description) VALUES (4, 'Hilltop Observatory', 'An observatory offering panoramic views of the surrounding area.');
INSERT INTO attractions (village_id, name, description) VALUES (5, 'Woodland Trails', 'A network of hiking trails through the forest.');
select *from attractions;

create table tourism_packages (package_id number generated by default as identity primary key, village_id number not null references villages(village_id), package_name varchar2(100), duration number, price number(10, 2), description varchar2(255)); 
insert into tourism_packages (village_id, package_name, duration, price, description) values (1, 'greenfield escape', 3, 199.99, 'a 3-day retreat in greenfield with relaxation and sightseeing.');
insert into tourism_packages (village_id, package_name, duration, price, description) values (2, 'riverside adventure', 5, 349.50, 'a 5-day adventure in riverside with hiking, boating, and river activities.');
insert into tourism_packages (village_id, package_name, duration, price, description) values (3, 'lakeside leisure', 4, 279.75, 'a 4-day stay at lakeside with boating, fishing, and nature walks.');
insert into tourism_packages (village_id, package_name, duration, price, description) values (4, 'hilltop horizon', 6, 399.00, 'a 6-day tour of hilltop with stunning views, hiking, and astronomy.');
insert into tourism_packages (village_id, package_name, duration, price, description) values (5, 'woodland retreat', 7, 450.00, 'a 7-day nature retreat in the woodland village with forest hikes and relaxation.');

create table customers (customer_id number generated by default as identity primary key, name varchar2(100), contact_info varchar2(15), address varchar2(255), email varchar2(100)); 
insert into customers (name, contact_info, address, email) values ('john doe', '1234567890', '123 main st, city, country', 'john.doe@example.com');
insert into customers (name, contact_info, address, email) values ('jane smith', '0987654321', '456 oak st, town, country', 'jane.smith@example.com');
insert into customers (name, contact_info, address, email) values ('michael johnson', '1122334455', '789 pine st, city, country', 'michael.johnson@example.com');
insert into customers (name, contact_info, address, email) values ('sarah lee', '6677889900', '101 maple st, village, country', 'sarah.lee@example.com');
insert into customers (name, contact_info, address, email) values ('david brown', '2233445566', '202 birch st, town, country', 'david.brown@example.com');
select *from customers;

create table bookings (booking_id number generated by default as identity primary key, customer_id number not null references customers(customer_id), package_id number not null references tourism_packages(package_id), booking_date date default sysdate, status varchar2(20) default 'booked'); 
insert into bookings (customer_id, package_id) values (1, 1);
insert into bookings (customer_id, package_id) values (2, 2);
insert into bookings (customer_id, package_id) values (3, 3);
insert into bookings (customer_id, package_id) values (4, 4);
insert into bookings (customer_id, package_id) values (5, 5);

select *from bookings;

--crud operations
--village
--1-insert
CREATE OR REPLACE PROCEDURE add_village (
    p_village_name IN VARCHAR2,
    p_region IN VARCHAR2,
    p_description IN VARCHAR2
) AS
BEGIN
    INSERT INTO Villages (village_name, region, description)
    VALUES (p_village_name, p_region, p_description);
    DBMS_OUTPUT.PUT_LINE('Village added successfully: ' || p_village_name);
    COMMIT;
END;
/

SET SERVEROUTPUT ON;
BEGIN
   -- add_village('Greenfield', 'south', 'A small peaceful village.');
   add_village('Greenary', 'south-east', 'A greenary full and valley beautiful village.');
END;

select *from villages;

--update
CREATE OR REPLACE PROCEDURE update_village (
    p_village_id IN NUMBER,
    p_village_name IN VARCHAR2,
    p_region IN VARCHAR2,
    p_description IN VARCHAR2
) AS
BEGIN
    UPDATE Villages
    SET village_name = p_village_name,
        region = p_region,
        description = p_description
    WHERE village_id = p_village_id;
    DBMS_OUTPUT.PUT_LINE('Village updated successfully: ' || p_village_name);
    COMMIT;
END;
/

SET SERVEROUTPUT ON;
BEGIN
    update_village(1,'jungler', 'north', 'A small but beautiful and peaceful village.');
END;

select *from villages;

--3-delete
CREATE OR REPLACE PROCEDURE delete_village (
    p_village_id IN NUMBER
) AS
BEGIN
    DELETE FROM Villages WHERE village_id = p_village_id;
    DBMS_OUTPUT.PUT_LINE('Village deleted successfully: ID ' || p_village_id);
    COMMIT;
END;
/

SET SERVEROUTPUT ON;
BEGIN
    delete_village(25);
END;

--attractions
--1-insert
CREATE OR REPLACE PROCEDURE add_attraction (
    p_village_id IN NUMBER,
    p_name IN VARCHAR2,
    p_description IN VARCHAR2
) AS
BEGIN
    INSERT INTO Attractions (village_id, name, description)
    VALUES (p_village_id, p_name, p_description);
    DBMS_OUTPUT.PUT_LINE('Attraction added successfully: ' || p_name);
    COMMIT;
END;
/
SET SERVEROUTPUT ON size 100000;
BEGIN
    add_attraction(1, 'Historic Castle', 'A beautiful medieval castle located in the heart of the village.');
END;

select *from attractions;


--2-update
CREATE OR REPLACE PROCEDURE update_attraction (
    p_attraction_id IN NUMBER,
    p_name IN VARCHAR2,
    p_description IN VARCHAR2
) AS
BEGIN
    UPDATE Attractions
    SET name = p_name,
        description = p_description
    WHERE attraction_id = p_attraction_id;
    DBMS_OUTPUT.PUT_LINE('Attraction updated successfully: ' || p_name);
    COMMIT;
END;
/

set serveroutput on size 100000;
begin
    update_attraction(2, 'scenic waterfall', 'a breathtaking waterfall surrounded by lush greenery, perfect for nature lovers.');
end;
/


--3-delete
CREATE OR REPLACE PROCEDURE delete_attraction (
    p_attraction_id IN NUMBER
) AS
BEGIN
    DELETE FROM Attractions WHERE attraction_id = p_attraction_id;
    DBMS_OUTPUT.PUT_LINE('Attraction deleted successfully: ID ' || p_attraction_id);
    COMMIT;
END;
/
set serveroutput on size 100000;
begin
    delete_attraction(1);
end;
/

--tourism packages
--1-insert
CREATE OR REPLACE PROCEDURE add_package (
    p_village_id IN NUMBER,
    p_package_name IN VARCHAR2,
    p_duration IN NUMBER,
    p_price IN NUMBER,
    p_description IN VARCHAR2
) AS
BEGIN
    INSERT INTO Tourism_Packages (village_id, package_name, duration, price, description)
    VALUES (p_village_id, p_package_name, p_duration, p_price, p_description);
    DBMS_OUTPUT.PUT_LINE('Package added successfully: ' || p_package_name);
    COMMIT;
END;
/
set serveroutput on size 100000;
begin
    add_package(5, 'foodland restaurant', 7, 375.00, 'a 7-day nature retreat in the foodland village with forest hikes and relaxation.');
end;
/

--2-update
CREATE OR REPLACE PROCEDURE update_package (
    p_package_id IN NUMBER,
    p_package_name IN VARCHAR2,
    p_duration IN NUMBER,
    p_price IN NUMBER,
    p_description IN VARCHAR2
) AS
BEGIN
    UPDATE Tourism_Packages
    SET package_name = p_package_name,
        duration = p_duration,
        price = p_price,
        description = p_description
    WHERE package_id = p_package_id;
    DBMS_OUTPUT.PUT_LINE('Package updated successfully: ' || p_package_name);
    COMMIT;
END;
/
set serveroutput on size 100000;
begin
    update_package(5, 'humayu restaurant', 7, 375.00, 'a 7-day nature retreat in humayu restaurant.');
end;
/

select *from TOURISM_PACKAGES;


--3-delete
CREATE OR REPLACE PROCEDURE delete_package (
    p_package_id IN NUMBER
) AS
BEGIN
    DELETE FROM Tourism_Packages WHERE package_id = p_package_id;
    DBMS_OUTPUT.PUT_LINE('Package deleted successfully: ID ' || p_package_id);
    COMMIT;
END;
/
set serveroutput on size 100000;
begin
    delete_package(2);
end;
/
--customers
--1-insert
CREATE OR REPLACE PROCEDURE add_customer (
    p_name IN VARCHAR2,
    p_contact_info IN VARCHAR2,
    p_address IN VARCHAR2,
    p_email IN VARCHAR2
) AS
BEGIN
    INSERT INTO Customers (name, contact_info, address, email)
    VALUES (p_name, p_contact_info, p_address, p_email);
    DBMS_OUTPUT.PUT_LINE('Customer added successfully: ' || p_name);
    COMMIT;
END;
/
set serveroutput on size 100000;
begin
    add_customer('john doe', '1234567890', '123 main st, city, country', 'john.doe@example.com');
    end;
/

select *from customers;

--bookings
--1-insert
CREATE OR REPLACE PROCEDURE book_package (
    p_customer_id IN NUMBER,
    p_package_id IN NUMBER
) AS
BEGIN
    INSERT INTO Bookings (customer_id, package_id)
    VALUES (p_customer_id, p_package_id);
    DBMS_OUTPUT.PUT_LINE('Booking made successfully for Customer ID: ' || p_customer_id);
    COMMIT;
END;
/
set serveroutput on size 100000;
begin
    book_package(5,5);
end;
/

select *from bookings;

--triggers for operations
CREATE OR REPLACE TRIGGER villages_insert_trigger
AFTER INSERT ON villages
FOR EACH ROW
BEGIN
    DBMS_OUTPUT.PUT_LINE('Inserted village: ' || :NEW.village_name || ' in region ' || :NEW.region);
END;
/


CREATE OR REPLACE TRIGGER villages_update_trigger
AFTER UPDATE ON villages
FOR EACH ROW
BEGIN
    -- Log the update action (you can replace this with any required action)
    DBMS_OUTPUT.PUT_LINE('Updated village: ' || :OLD.village_name || ' to ' || :NEW.village_name || ' in region ' || :NEW.region);
END;
/
--test the triggers
SET SERVEROUTPUT ON;
BEGIN
    add_village('New Village', 'North-East', 'A growing village with many amenities.');
END;
/

SET SERVEROUTPUT ON;
BEGIN
    update_village(3, 'Updated Riverside', 'North-east', 'A village by the river with scenic views.');
END;
/

SET SERVEROUTPUT ON;
BEGIN
    delete_village(21);
END;
/ 

--cursor --->fetch all data
create or replace procedure show_attractions as
    cursor attractions_cursor is
        select attraction_id, name, description
        from attractions;
begin
    dbms_output.put_line('--------------------------------------------------');
    dbms_output.put_line('              attractions list');
    dbms_output.put_line('--------------------------------------------------');
    for attraction in attractions_cursor loop
        dbms_output.put_line('attraction id: ' || attraction.attraction_id);
        dbms_output.put_line('name        : ' || attraction.name);
        dbms_output.put_line('description : ' || attraction.description);
        dbms_output.put_line('--------------------------------------------------');
    end loop;
    dbms_output.put_line('--------------------------------------------------');
end;
/

set serveroutput on;
begin
    show_attractions;
end;
/


-- procedure to search for packages by village and entry fees
create or replace procedure search_packages_by_village_and_fee(p_village_name in varchar2, p_max_fee in number) as
    cursor packages_cursor is
        select p.package_name, p.duration, p.price, v.village_name
        from tourism_packages p
        join villages v on p.village_id = v.village_id
        where lower(v.village_name) like '%' || lower(p_village_name) || '%'
        and p.price <= p_max_fee;
begin
    for package in packages_cursor loop
        dbms_output.put_line('package: ' || package.package_name);
        dbms_output.put_line('duration: ' || package.duration || ' days');
        dbms_output.put_line('price: ' || package.price);
        dbms_output.put_line('village: ' || package.village_name);
        dbms_output.put_line('--------------------------------------------------');
    end loop;
end;
/

-- trigger to log insertion into attractions
create or replace trigger log_attraction_insertion
after insert on attractions
for each row
begin
    dbms_output.put_line('new attraction added: ' || :new.name);
    dbms_output.put_line('description: ' || :new.description);
end;
/

-- trigger to log updates on villages
create or replace trigger log_village_update
after update on villages
for each row
begin
    dbms_output.put_line('village updated from ' || :old.village_name || ' to ' || :new.village_name);
    dbms_output.put_line('new description: ' || :new.description);
end;
/



-- execute a procedure based on user choice
create or replace procedure execute_operation(choice number) as
begin
    case choice
        when 1 then
            search_attractions('park');
        when 2 then
            search_villages('hilltop');
        when 3 then
            search_packages_by_village_and_fee('riverside', 300);
        else
            dbms_output.put_line('invalid choice. please enter a valid option.');
    end case;
end;
/

set serveroutput on;
begin
    execute_operation(1); -- calling ones for adding village
    execute_operation(2); --updating
    execute_operation(3); --deleting
end;
/


--actual flow for user to work with a project accordingly
create or replace procedure execute_operation(choice number) as
begin
    case choice
        when 1 then
            add_village('Greenary', 'south-east', 'A greenary full and valley beautiful village.');
            dbms_output.put_line('Village added successfully.');

        when 2 then
            update_village(1, 'Harmony Village', 'South Region', 'A vibrant village with rich culture and traditions.');
            dbms_output.put_line('Village updated successfully.');

        when 3 then
            delete_village(21);
            dbms_output.put_line('Village deleted successfully.');

        when 4 then
            add_attraction(1, 'Mystic Lake', 'A serene lake surrounded by mountains.');
            dbms_output.put_line('Attraction added successfully.');

        when 5 then
            update_attraction(1, 'Mystic Falls', 'A beautiful waterfall in the heart of the forest.');
            dbms_output.put_line('Attraction updated successfully.');

        when 6 then
            delete_attraction(1);
            dbms_output.put_line('Attraction deleted successfully.');

        when 7 then
            add_package(1, 'Adventure Trek', 5, 499.99, 'A thrilling trek through the mountains.');
            dbms_output.put_line('Package added successfully.');

        when 8 then
            update_package(1, 'Relaxation Retreat', 3, 299.99, 'A relaxing retreat with spa services.');
            dbms_output.put_line('Package updated successfully.');

        when 9 then
            delete_package(11);
            dbms_output.put_line('Package deleted successfully.');

        when 10 then
            add_customer('John Doe', '1234567890', '123 Elm Street, Springfield', 'johndoe@example.com');
            dbms_output.put_line('Customer added successfully.');

        when 11 then
            book_package(1, 1);
            dbms_output.put_line('Package booked successfully.');

        when 12 then
            show_attractions;

        else
            dbms_output.put_line('Invalid choice. Please enter a valid option.');
    end case;
end;
/

set serveroutput on size 1000000;
begin
    execute_operation(1); -- Replace the number with the desired operation choice
end;